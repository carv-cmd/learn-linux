----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

-- TLCL:Chapter 7 - Expansions - See World How Shell Sees It --

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

---------------------------------------------------

# Expansion Types:
	> pathname
	> tilde
	> arithmetic
	> brace
	> parameter
	> command substitution

# Quoting:
	> double quotes
	> single quotes
	> escaping characters


========================================================================================
========================================================================================
# Pathname Expansion: *.txt
----------------------------

-> echo *		 - equivalent to 'ls'

-> echo D*		 - all directories starting with 'D'

-> echo *s		 - all directories ending with 's'

-> echo [[:upper:]]*	 - all directories starting with UPPERCASE letter

-> echo /usr/*/share	 - ex: '/usr/local/share' & '/usr/kerberos/share'

-> echo .[!.]* 		 - expands HIDDEN files w/o [ . , .. ] dirs
^-> ls -A


========================================================================================
========================================================================================
# Tilde Expansion: ~
----------------------

-> echo ~		 - /home/susadmin

-> echo ~foobar		 - /home/foobar


========================================================================================
========================================================================================
# Arithmetic Expansion: $((expression)) 
-----------------------------------------
# Operators: [ + , - , * , / , % , ** ] 
----------------------------------------

-> echo $((2 + 2))		  - returns: 4

-> echo $(((5**2) * 3))		  - returns: 75

-> echo 5+2=$((5 + 2))		  - returns: 5+2=7 


========================================================================================
========================================================================================
# Brace Expansion: {a,b,c} | {a..c} | {1..3}
---------------------------------------------

-> echo job{A..C}-stats		  - `jobA-stats jobB-stats jobC-stats`

-> echo run-task-{0..2}		  - `run-task-0 run-task-1 run-task-2`

-> echo {01..12}		  - `01 02 03 04 05 06 07 08 09 10 11 12`

-> echo {001..11}		  - `001 002 003 004 005 006 007 008 009 010 011`

-> echo {Z..T}			  - `Z Y X W V U T`

-> echo a{A{1,2},B{3,4}b	  - `aA1b aA2b aB3b aB4b`


========================================================================================
========================================================================================
# Parameter Expansion: $ENV_VARS
---------------------------------

-> echo $USER			  - susadmin

-> printenv | less		  - prints all environment variables

-> echo $SUER			  - returns None if var doesnt exist


========================================================================================
========================================================================================
# History Expansion: !<val>
---------------------------------

-> !!				  - repeat last command
-> !number			  - repreat history item number

--caution--

-> !string			  - repeat last history list item starting with string
-> !?string			  - repeat last history item containing string


========================================================================================
========================================================================================
# Command Substitution: $(command)
-----------------------------------

-> echo $(ls)				 - standard ls result

-> ls -l $(which cp)			 - 'which' output is passed as argument into 'ls'

-> ls -l `which cp`			 - also legal formatting:[ `cmd` == $(cmd) ]

---------------------------------------

-> file $(ls -d /usr/bin/* | grep zip)	 

	> ls:	 gets all /usr/bin/*, 
	> grep:  any 'zip' matches, 
	> file:  takes $(found) as an argument
 
	*>> FileType of all matches are returned


========================================================================================
========================================================================================
# Quoting: 'foo bar' | "foo bar"
---------------------------------

-> "double quotes"			 - suppresses MOST expansions; exceptions[ $ , \ , `` ]

-> 'single quotes'			 - suppresses ALL expansions

-----------------------------------------
  QUOTING  |    SYNTAX     |  RETURNS
-----------|---------------|------------------------------------------------
 	None   |  echo $(cal)  | Calander as a single line string
-----------|---------------|------------------------------------------------
  'Singles'| echo '$(cal)' | No expansion happens, returns cmd passed to it
-----------|---------------|------------------------------------------------
 "doubles" | echo "$(cal)" | Cal echos with proper initial formatting
----------------------------------------------------------------------------


========================================================================================
========================================================================================
# Escaping Characters: \
--------------------------

----------------------
 Escape Sequence | Meaning
-----------------|--------------------------------------
      \a         | Bell(audible alert/beep)
-----------------|--------------------------------------
      \b         | Backspace
-----------------|--------------------------------------
      \n         | Newline (line feed on unix-like)
-----------------|--------------------------------------
      \r         | Carriage Return
-----------------|--------------------------------------
      \t         | Tab
--------------------------------------------------------

-> To remove a characters special meaning in the shell precede it with a backslash
--> ( \$ ), ( \! ), ( \& ), ( \\ )


========================================================================================
========================================================================================
