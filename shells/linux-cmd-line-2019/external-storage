---------------------------
------ STORAGE MEDIA ------
---------------------------

----------------------------------------------------------------
* The key commands used to manage storage devices listed below:
----------------------------------------------------------------

-> mount 	- Mount a filesystem

-> umount 	- Unmount a filesystem

-> fsck 	- Check and repair a filesystem

-> fdisk 	- Manipulate disk partition table

-> mkfs 	- Create a filesystem

-> dd 		- Convert and copy a file

-> genisoimage 	- Create an ISO 9660 image file

-> wodim 	- Write data to optical storage media

-> md5sum	- Calculate an MD5 checksum

----------------------------------------------------------------

################################################################
################################################################

-------------------------------------------
------------------------------------------|
*** MOUNTING & UNMOUNTING STORAGE DEVICES |
------------------------------------------|
-------------------------------------------

-> First step in storage management is "mounting" our device
	* This 'attaches' our hardware to the system file tree

-> Viewing Connections >>> " sudo tail -f /var/log/syslog "

-> File: "/etc/fstab" contains the list of devices that are to be mounted at boot time

--> There are 3 entries we are primarily looking for:

-----------------------------------------------------------------------------------------------
--------| Device |--| MountPoint |-| FileSystemType |--| Options |--| Frequency |--| Order |
-----------------------------------------------------------------------------------------------
1).	LABEL=/12	/		 ext4		defaults	  1	       1
2).	LABEL=/home	/home		 ext4		defaults	  1	       2
3).	LABEL=/boot	/boot		 ext4		defaults	  1	       2
-----------------------------------------------------------------------------------------------
* There are 6 fields associated with each entry:
------------------------------------------------

-> Device:
	-> With the advent of hot pluggable drives, many modern distros associate a device with a text LABEL
	-> This label (added to storage media when its formatted) can either be simple text or a UUID
	 >> This label is whats read by the OS when a device is attached to the system
	 >> Regardless of which device file is assigned to the physical device, it can still be correctly identified

-> Mount Point:
	-> The directory where the device is attached to the file system tree

-> File System Type:
	-> Linux allows many file systems to be mounted
	-> Most native Linux file systems are 'Fourth Extended File Systems (ext4)'
	 >> But many others are supported such as:
	 >> 'FAT16(msdos)' - 'FAT32(vfat)' - 'NTFS(ntfs)' - 'CD-ROM(iso9660)' - etc

-> Options:
	-> File systems can be mounted with various options.
	-> We can use this as an added security feature;
	 >> Mount file systems as read-only
	 >> Deny execution privileges to a mounted file system

-> Frequency:
	-> Single number; flag for backups
	-> Specifies if and when a file system is to be backed up with the 'dump' command

-> Order:
	-> Single number; flag for file system checks
	-> Specifies what order file systems should be checked with 'fsck' command

-----------------------------------------------
* VIEWING A LIST OF MOUNTED FILE SYSTEMS(mount)
-----------------------------------------------

-> The 'mount' command is used to mount file systems, obviously.
	-> Calling w/o any arguments will display a list of the file systems currnetly mounted.
	 >> Listing Format:  " <device> on <mount_point> type <file_system_type> (<options>) "

--------------------------------
* MOUNTING | UNMOUNTING DEVICES
--------------------------------

-> To mount a partition/device from /dev directory:
	
	 >>> mount /dev/sda1 /mnt/flash


-> Say we have a device currently mounted at: "/dev/sda"
-> We would like to have it mounted at: "/mnt/flash"
	-> Begin by unmounting disk:

	 >>> sudo umount /dev/sda
	
	
-> Next step is to create a new mount point for the device
	-> This is simply a directory somewhere on the file system tree
	-> Luckily theres already a default directory for this purpose; /mnt

	 >>> sudo mkdir /mnt/flash


-> Then we mount the device at its new home:
	-> The '-t' argument/option is used to specify the file_system_type

	 >>> mount -t ext4 /dev/sda /mnt/flash


-> Now we can examine the contents of our device via the mount point:

	 >>> cd /mnt/flash
	 >>> ls


-> Fianlly we cant forget to unmount the device and free up those resources
	-> Remeber, once we 'cd' into this directory its considered 'busy' by the system
	-> Therefore to 'umount' this device, first exit the mounting directory
	-> We can then use the 'free' command to check memory usage statistics (buffers)

	 >>> cd
	 >>> sudo umount /dev/sda 
	 >>> free


------------------------------------
* DETERMINING DEVICE NAMES(ls /dev)
------------------------------------

-> To view all devices connected to our system, view the contents of "/dev" 
-> A few of the common patterns seen are listed below:
-> In addition we often see symbolic links such as: [ /dev/cdrom | /dev/dvd | /dev/floppy ]
	-> Which point to the actual device files, provided as a convenience

   PATTERN  |  DEVICE
------------|--------------------------------------------------------------
  /dev/fd*  | Floppy disk drives
------------|--------------------------------------------------------------
  /dev/hd*  | IDE (PATA) disks on older systems
------------|--------------------------------------------------------------
  /dev/lp*  | Printers
------------|--------------------------------------------------------------
  /dev/sd*  | SCSI disks. On modern Linux systems, the kernel treats all
	    | like devices (
	    |  including PATA/SATA hard-disks, flash-drives, and USB mass
	    |  storage devices such as portable music players digital cameras
	    | )
	    | as SCSI disks. The rest of the naming system is similar to 
	    | the older '/dev/hd*' naming scheme described by PATA.std
------------|--------------------------------------------------------------
  /dev/sr*  | Optical drives 
------------|--------------------------------------------------------------


-> To watch connections initiate live we can use  
	-> This is useful if were having trouble locating our device in the tree

	 >>> sudo tail -f /var/log/syslog

################################################################
################################################################

-----------------------------------------
* CREATING NEW FILE SYSTEMS(gdisk/fdisk)
-----------------------------------------

-> Say we want to reformat a flash drive from `FAT32` to a `Linux native` file system
-> This involves two steps: (UNMOUNT FIRST)
	-> (optional) Create a new partition layout that satifies our needs
	-> Create a new, empty file system on the drive	

-> For 'partitioning' we have 2 tools available:
	-> gdisk >> for GDT style
	-> fdisk >> For MDB style 

	 >>> sudo unmount /dev/sda1
	 >>> sudo gdisk /dev/sda
	  >>> p
	  >>> l 
	  >>> t = 83
	  >>> v

-----------------------------------
* CREATING A NEW FILE SYSTEM(mkfs)
-----------------------------------

-> Now with a verified partition on our disk, we create a file system on it
	-> The 'mkfs' command does this, but we must specify a file system type with it 
	-> Add the verbose flag to see whats going on during creation
	-> To reformat back to FAT32 specify vfat as the file system type

	 >>> sudo mkfs.ext4 -v /dev/sda1

-------------------------------------------
* TESTING AND REPAIRING FILE SYSTEMS(fsck) 
-------------------------------------------

	 >>> sudo fsck /dev/sda1

-----------------------------------------------
* MOVING DATA DIRECTLY TO AND FROM DEVICES(dd)
-----------------------------------------------

* TRIPLE CHECK EVERYTHING IS CORRECT BEFORE EXECUTING COMMAND 
* ITS REFERRED TO AS "DESTROY DISK" FOR A GOOD REASON

-> Memory in its 'raw' form is secotrs-of-bytes(blocks) rather than a literal file system tree
	-> With this in mind we can view a disk as single collection of those sectors
	-> To 'clone' a drive all were doing is copying blocks from pointA to pointB
	-> The 'dd' command performs this task, with some odd, but EXTREMELY SPECIFIC syntax
	 
	 > FORMAT: dd if=input_file of=output_file [bs=block_size [count=blocks]]

	 >>> dd if=/dev/sda of=/dev/sdc  (copy to external disk)
	 
	 >>> dd if=/dev/sda of=flash_drive.img

----------------------------------
* VERIFYING MD5 CHECKSUMS(md5sum)
----------------------------------

	 >>> md5sum check_image.iso

################################################################
################################################################

